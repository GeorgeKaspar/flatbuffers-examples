// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLLECTION_KASPAR_H_
#define FLATBUFFERS_GENERATED_COLLECTION_KASPAR_H_

#include "flatbuffers/flatbuffers.h"

#include "book_generated.h"

namespace kaspar {

struct BookCollection;

struct BookCollection FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BOOKS = 4,
    VT_INFO = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Book>> *books() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Book>> *>(VT_BOOKS);
  }
  const Info *info() const {
    return GetPointer<const Info *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BOOKS) &&
           verifier.Verify(books()) &&
           verifier.VerifyVectorOfTables(books()) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyTable(info()) &&
           verifier.EndTable();
  }
};

struct BookCollectionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_books(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Book>>> books) {
    fbb_.AddOffset(BookCollection::VT_BOOKS, books);
  }
  void add_info(flatbuffers::Offset<Info> info) {
    fbb_.AddOffset(BookCollection::VT_INFO, info);
  }
  explicit BookCollectionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BookCollectionBuilder &operator=(const BookCollectionBuilder &);
  flatbuffers::Offset<BookCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BookCollection>(end);
    return o;
  }
};

inline flatbuffers::Offset<BookCollection> CreateBookCollection(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Book>>> books = 0,
    flatbuffers::Offset<Info> info = 0) {
  BookCollectionBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_books(books);
  return builder_.Finish();
}

inline flatbuffers::Offset<BookCollection> CreateBookCollectionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Book>> *books = nullptr,
    flatbuffers::Offset<Info> info = 0) {
  return kaspar::CreateBookCollection(
      _fbb,
      books ? _fbb.CreateVector<flatbuffers::Offset<Book>>(*books) : 0,
      info);
}

inline const kaspar::BookCollection *GetBookCollection(const void *buf) {
  return flatbuffers::GetRoot<kaspar::BookCollection>(buf);
}

inline const kaspar::BookCollection *GetSizePrefixedBookCollection(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<kaspar::BookCollection>(buf);
}

inline bool VerifyBookCollectionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<kaspar::BookCollection>(nullptr);
}

inline bool VerifySizePrefixedBookCollectionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<kaspar::BookCollection>(nullptr);
}

inline void FinishBookCollectionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kaspar::BookCollection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBookCollectionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kaspar::BookCollection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace kaspar

#endif  // FLATBUFFERS_GENERATED_COLLECTION_KASPAR_H_
